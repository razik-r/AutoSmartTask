import React, { useState } from "react";
import ChevronUp from "../../../../assets/ChevronUp";
import ChevronDown from "../../../../assets/ChevronDown";
import Running from "../assets/Running";

export default function QuarterSelector() {
  const [isOpen, setIsOpen] = useState(false);

  const [selectedOption, setSelectedOption] = useState("2025-Quarter 1");

  const toggleDropdown = () => {
    setIsOpen(!isOpen);
  };

  const handleOptionClick = (option) => {
    setSelectedOption(option); //
    setIsOpen(false);
  };

  const options = [
    "2025-Quarter 1",
    "2025-Quarter 2",
    "2025-Quarter 3",
    "2025-Quarter 4",
    "2026-Quarter 1",
  ];

  return (
    <>
      <div className="relative ">
        <button
          className="border   border-gray-border1  rounded-[8px] flex  font-inter sm:justify-between items-center hover:cursor-pointer "
          onClick={toggleDropdown}
        >
          <div className="flex flex-col gap-2 justify-center items-start py-2.5 pl-2.5 pr-2.5">
          <p className="text-text-gray text-[10px] font-normal  tracking-[-0.5%] leading-3">Select the term</p>
           
            <div className=" flex gap-4  justify-center items-center  ">
            <h1 className="font-medium text-xs leading-4 tracking-[-0.5%] ">
              {selectedOption}
            </h1>
            <svg width="46" height="16" viewBox="0 0 46 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect y="0.5" width="46" height="15" rx="4" fill="#3F9A26"/>
<path d="M4.88068 11.5V4.22727H7.33807C7.90625 4.22727 8.37263 4.32434 8.73722 4.51847C9.1018 4.71023 9.37169 4.97419 9.54688 5.31037C9.72206 5.64654 9.80966 6.02888 9.80966 6.45739C9.80966 6.88589 9.72206 7.26586 9.54688 7.5973C9.37169 7.92874 9.10298 8.18916 8.74077 8.37855C8.37855 8.56558 7.91572 8.65909 7.35227 8.65909H5.36364V7.86364H7.32386C7.71212 7.86364 8.02462 7.80682 8.26136 7.69318C8.50047 7.57955 8.6733 7.41856 8.77983 7.21023C8.88873 6.99953 8.94318 6.74858 8.94318 6.45739C8.94318 6.16619 8.88873 5.91169 8.77983 5.69389C8.67093 5.47609 8.49692 5.308 8.25781 5.18963C8.0187 5.06889 7.70265 5.00852 7.30966 5.00852H5.76136V11.5H4.88068ZM8.30398 8.23295L10.0938 11.5H9.07102L7.30966 8.23295H8.30398ZM14.551 9.26989V6.04545H15.3891V11.5H14.551V10.5767H14.4942C14.3664 10.8537 14.1675 11.0893 13.8976 11.2834C13.6277 11.4751 13.2868 11.571 12.8749 11.571C12.534 11.571 12.231 11.4964 11.9658 11.3473C11.7007 11.1958 11.4923 10.9685 11.3408 10.6655C11.1893 10.3601 11.1135 9.97538 11.1135 9.51136V6.04545H11.9516V9.45455C11.9516 9.85227 12.0629 10.1695 12.2854 10.4062C12.5103 10.643 12.7968 10.7614 13.1448 10.7614C13.3531 10.7614 13.565 10.7081 13.7804 10.6016C13.9982 10.495 14.1805 10.3317 14.3273 10.1115C14.4765 9.89134 14.551 9.6108 14.551 9.26989ZM17.7121 8.21875V11.5H16.8741V6.04545H17.6837V6.89773H17.7548C17.8826 6.62074 18.0767 6.3982 18.3371 6.23011C18.5976 6.05966 18.9337 5.97443 19.3457 5.97443C19.715 5.97443 20.0381 6.05019 20.3151 6.2017C20.5921 6.35085 20.8076 6.57812 20.9614 6.88352C21.1153 7.18655 21.1923 7.57008 21.1923 8.03409V11.5H20.3542V8.09091C20.3542 7.66241 20.2429 7.3286 20.0204 7.08949C19.7978 6.84801 19.4924 6.72727 19.1042 6.72727C18.8367 6.72727 18.5976 6.78527 18.3869 6.90128C18.1785 7.01728 18.014 7.18655 17.8933 7.40909C17.7725 7.63163 17.7121 7.90152 17.7121 8.21875ZM23.5118 8.21875V11.5H22.6737V6.04545H23.4833V6.89773H23.5544C23.6822 6.62074 23.8763 6.3982 24.1368 6.23011C24.3972 6.05966 24.7333 5.97443 25.1453 5.97443C25.5146 5.97443 25.8377 6.05019 26.1147 6.2017C26.3917 6.35085 26.6072 6.57812 26.761 6.88352C26.9149 7.18655 26.9919 7.57008 26.9919 8.03409V11.5H26.1538V8.09091C26.1538 7.66241 26.0425 7.3286 25.82 7.08949C25.5975 6.84801 25.2921 6.72727 24.9038 6.72727C24.6363 6.72727 24.3972 6.78527 24.1865 6.90128C23.9781 7.01728 23.8136 7.18655 23.6929 7.40909C23.5721 7.63163 23.5118 7.90152 23.5118 8.21875ZM28.4733 11.5V6.04545H29.3114V11.5H28.4733ZM28.8994 5.13636C28.7361 5.13636 28.5952 5.08073 28.4768 4.96946C28.3608 4.85819 28.3028 4.72443 28.3028 4.56818C28.3028 4.41193 28.3608 4.27817 28.4768 4.1669C28.5952 4.05563 28.7361 4 28.8994 4C29.0628 4 29.2025 4.05563 29.3185 4.1669C29.4368 4.27817 29.496 4.41193 29.496 4.56818C29.496 4.72443 29.4368 4.85819 29.3185 4.96946C29.2025 5.08073 29.0628 5.13636 28.8994 5.13636ZM31.6344 8.21875V11.5H30.7963V6.04545H31.606V6.89773H31.677C31.8049 6.62074 31.999 6.3982 32.2594 6.23011C32.5198 6.05966 32.856 5.97443 33.2679 5.97443C33.6373 5.97443 33.9604 6.05019 34.2374 6.2017C34.5144 6.35085 34.7298 6.57812 34.8837 6.88352C35.0376 7.18655 35.1145 7.57008 35.1145 8.03409V11.5H34.2765V8.09091C34.2765 7.66241 34.1652 7.3286 33.9426 7.08949C33.7201 6.84801 33.4147 6.72727 33.0265 6.72727C32.7589 6.72727 32.5198 6.78527 32.3091 6.90128C32.1008 7.01728 31.9363 7.18655 31.8155 7.40909C31.6948 7.63163 31.6344 7.90152 31.6344 8.21875ZM38.7977 13.6591C38.3928 13.6591 38.0448 13.607 37.7536 13.5028C37.4624 13.401 37.2198 13.2661 37.0256 13.098C36.8339 12.9323 36.6812 12.7547 36.5675 12.5653L37.2352 12.0966C37.3109 12.196 37.4068 12.3097 37.5228 12.4375C37.6388 12.5677 37.7974 12.6802 37.9987 12.7749C38.2022 12.8719 38.4686 12.9205 38.7977 12.9205C39.238 12.9205 39.6014 12.8139 39.8879 12.6009C40.1743 12.3878 40.3175 12.054 40.3175 11.5994V10.4915H40.2465C40.185 10.5909 40.0974 10.714 39.9837 10.8608C39.8725 11.0052 39.7115 11.1342 39.5008 11.2479C39.2924 11.3591 39.0107 11.4148 38.6556 11.4148C38.2153 11.4148 37.8199 11.3106 37.4695 11.1023C37.1215 10.8939 36.8457 10.5909 36.6421 10.1932C36.4409 9.79545 36.3403 9.3125 36.3403 8.74432C36.3403 8.18561 36.4385 7.6991 36.635 7.2848C36.8315 6.86813 37.1049 6.54616 37.4553 6.31889C37.8057 6.08925 38.2105 5.97443 38.6698 5.97443C39.0249 5.97443 39.3067 6.03362 39.515 6.15199C39.7257 6.26799 39.8867 6.40057 39.9979 6.54972C40.1116 6.6965 40.1992 6.81723 40.2607 6.91193H40.346V6.04545H41.1556V11.6562C41.1556 12.125 41.0491 12.5062 40.836 12.7997C40.6253 13.0956 40.3412 13.3123 39.9837 13.4496C39.6286 13.5893 39.2333 13.6591 38.7977 13.6591ZM38.7692 10.6619C39.1054 10.6619 39.3895 10.585 39.6215 10.4311C39.8535 10.2772 40.0299 10.0559 40.1506 9.76705C40.2714 9.47822 40.3317 9.13258 40.3317 8.73011C40.3317 8.33712 40.2726 7.99029 40.1542 7.68963C40.0358 7.38897 39.8606 7.15341 39.6286 6.98295C39.3966 6.8125 39.1102 6.72727 38.7692 6.72727C38.4141 6.72727 38.1182 6.81723 37.8815 6.99716C37.6471 7.17708 37.4707 7.41856 37.3523 7.72159C37.2363 8.02462 37.1783 8.3608 37.1783 8.73011C37.1783 9.1089 37.2375 9.44389 37.3559 9.73509C37.4766 10.0239 37.6542 10.2512 37.8886 10.4169C38.1253 10.5803 38.4189 10.6619 38.7692 10.6619Z" fill="white"/>
</svg>


{!isOpen ? (
           <ChevronDown className="size-4"/>
          ) : (
           <ChevronUp className="size-4"/>
          )}
            </div>
          </div>
         
        </button>

      
          <div className={` absolute   w-full mt-1 border rounded-lg bg-[#FFFFFF] border-gray-border1  z-999 shadowbox1 transition-all duration-200 ease-in-out transform origin-top ${
            isOpen ? "scale-y-100 opacity-100" : "scale-y-0 opacity-0"
          } overflow-hidden`}  >
            <div className=" flex flex-col  gap-4 ">
              
              <div className=" flex flex-col      mt-2        ">
                {options
                  .filter((option) => option !== selectedOption) 
                  .map((option, index) => (
                    <div
                      key={index}
                      href="#"
                      className=" hover:py-2 px-3 hover:cursor-pointer   hover:mb-2 group text-sm/4.5 hover:bg-[#F6F6F6] flex flex-col  gap-1  text-nowrap transition-all duration-200 ease-in-out transform  "
                      onClick={() => handleOptionClick(option)}
                    >
                     <h1 className="text-text-gray group-hover:text-[#212121] group-hover:font-medium ">{option}</h1>
                    <Running/>
                    </div>
                  ))}
              </div>
            </div>
          </div>
      
      </div>
    </>
  );
}


